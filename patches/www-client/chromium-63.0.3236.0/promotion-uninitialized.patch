diff --git a/base/numerics/checked_math_impl.h b/base/numerics/checked_math_impl.h
index 2926b37b5ecd..90f99da994b0 100644
--- a/base/numerics/checked_math_impl.h
+++ b/base/numerics/checked_math_impl.h
@@ -67,7 +67,7 @@ struct CheckedAddOp<T,
       return false;
     }
 
-    Promotion presult;
+    Promotion presult = 0;
     bool is_valid = true;
     if (IsIntegerArithmeticSafe<Promotion, T, U>::value) {
       presult = static_cast<Promotion>(x) + static_cast<Promotion>(y);
@@ -127,7 +127,7 @@ struct CheckedSubOp<T,
       return false;
     }
 
-    Promotion presult;
+    Promotion presult = 0;
     bool is_valid = true;
     if (IsIntegerArithmeticSafe<Promotion, T, U>::value) {
       presult = static_cast<Promotion>(x) - static_cast<Promotion>(y);
@@ -183,7 +183,7 @@ struct CheckedMulOp<T,
       return false;
     }
 
-    Promotion presult;
+    Promotion presult = 0;
     bool is_valid = true;
     if (CheckedMulFastOp<Promotion, Promotion>::is_supported) {
       // The fast op may be available with the promoted type.
diff --git a/base/numerics/clamped_math_impl.h b/base/numerics/clamped_math_impl.h
index e18f93900620..b9dbec856ba2 100644
--- a/base/numerics/clamped_math_impl.h
+++ b/base/numerics/clamped_math_impl.h
@@ -90,7 +90,7 @@ struct ClampedAddOp<T,
         IsTypeInRangeForNumericType<V, T>::value ||
             IsTypeInRangeForNumericType<V, U>::value,
         V, typename BigEnoughPromotion<T, U>::type>;
-    Promotion result;
+    Promotion result = 0;
     if (BASE_NUMERICS_LIKELY((CheckedAddOp<T, U>::Do(x, y, &result))))
       return saturated_cast<V>(result);
 
@@ -133,7 +133,7 @@ struct ClampedSubOp<T,
         IsTypeInRangeForNumericType<V, T>::value ||
             IsTypeInRangeForNumericType<V, U>::value,
         V, typename BigEnoughPromotion<T, U>::type>;
-    Promotion result;
+    Promotion result = 0;
     if (BASE_NUMERICS_LIKELY((CheckedSubOp<T, U>::Do(x, y, &result))))
       return saturated_cast<V>(result);
 
